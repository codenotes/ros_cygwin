Q: Can I create my own installation of cygwin and install the binaries to that?
A: No. The build and tools are specific to a particular verison of cygwin and may break if a different cygwin distro is used.

Q: I have 32 bit Windows, is there something for that?
A: No.

Q: Can I rebuild from source to leverage newer versions of Jade?
A: Build scripts are included, but it is not easy nor automatic. It is recommended you stick with the version of Jade that
is compiled for the time being.

Q: What is cygwin?
A: It is a linux-like subsystem for Windows.  It emulates a linux-like environment and provides applications with the tools
and comilation infrastructure such that *nix programs can most often be compiled and run successfully on Windows.  Also, it provides
a full bash shell. If you are not familiar with cygwin, you will want to become so. 

Q: There is a Windows Ubuntu initiative from Microsoft, can we use that instead?
A: Hopefully, in time. At present it is missing a few key features than create problems for the ROS libraries...mainly
the inability to enumerate network interfaces.  But it looks promising and if/when it is complete, it may eliminate the
need for this distro. 

Q: Can I use Microsof Visual Studio to link against these binary libraries?  
A: Not directly. Compilations are done with gcc in cygwin, and these are C++ libraries so they are not binary
compatible with MSVC compilers. However, it is fairly trivial to take the roscpp sources, put them in a Visual Studio project
and compile the as MSVC windows dlls. This is what we use for our clients, actually: we run roscore on cygwin, but our clients
are MSVC applications linked against MSVC-compiled ROS binaries.  Little known fact that the ROS authors put all the necessary preprocessor
instructions for windows compilation in their code, so you do not need Catkin to compile MSVC windows binaries. 

Q: What isn't here?
A: Most tools are present. But many of the lesser used ones are not tested.  There can be some quirks with the GUI tools due
to QT on windows vs other environments.  The X-windows dependent tools can work, but an x-windows server for windows needs
to be installed. Roscore runs well, rostopic, rosnode, all these seem to operate.  The package management tools are not really
tested, but may work (or may be fixed via their python source).  apt-get certainly will not work as an installation method as
cygwin doesn't have this.  apt-cyg is installed (like apt-get) but that system doesn't know anything about ROS. 

Q: What issues am I likely to encounter when I try this out?
A: Most likely you will encounter things that seem like cygwin issues but are really regular ROS issues.  Networking can be
complex: be very, very sure to set ROS_IP equal to your IP address on both cygwin bash AND as environemtnal variable on
your windows machine.  ROS_MASTER_URI is also critical to be set correctly on your windows machine.  Use numeric ipv4 
addresses, don't rely on host name resolution.  And you MAY want to deprioritize ipv6 as that can create issues. So many
connection issues are do to this.

Q: How stable is this?
A: Pretty stable. Have done relatively intense messaging over prolonger periods of time.

Q: Why isn't there more documentation?
A: This port is part of an active project and developed for a particular use case where we only have windows hardware. It
was not developed as a community tool, but rather just being released at the urging of Brian Gerkey and others at the OSF
to provide a proper native environment for Windows users.  Something that works well for us, and hope it can help others. 
But we don't have all the badwidth we'd like to support this fully...hopefully if there is continued need, this can become
a proper community project. 

Q: Why isn't the OSF maintaining this?
A: THe build is complex, not automatied and cygwin-based.  We have discussed handing this over, but it would require
a fair amount of work and the creation of a new process to accomodate this.  That would delay the release quite a bit, so 
we felt it was best, at least for now, to just put the distro here and let folks use it.

Q: Should I be using this at all? What about a linux VM on Windows?
A: We did VMs initially and still, occaisonally, use them to test. That system works very well, the downside the context
switching the developer needs to do to constantly shuffle between very different environments.  VMs also have add a fair bit
of overhead and sometimes there can be frustrating network-related bridging issues between the host and guest OSs.  But
there is really nothing wrong with it and, in fact, probably the recommended path for most users, particularly beginners. 
However, a lot of folks don't know linux, arent comfortable with it, or just prefer the tools and environment for Windows.
So this is probably a good solution for them.  It is particularly nice to be running everything on one OS, nodes, tools 
(like rviz, rosbag, etc.) without the compilcation of switching operating systems. 

Q: Will you upgrade this to later version of ROS and/or cygwin
A: Probably. But not often, and only if the Windows/Ubuntu initiative does not bear fruit. We are mostly concerned with
applications that rely on a stable ROS platform. 

Q: If this is useful to me, who should I be thankful to?
A: The folks at OSF whi have written a tremendously create library where they anticipated the need for a windows port
and put the basics of that in their stable, well-thought out environment.  Also the folks at cygwin who took on the 
task of bringing *nix to windows and being able to map OS functionality from one to the other.  Also, the folks at sysprogs 
who make the world's great cross-compilation tool for VS, VisualGDB.  They figured out most the complex porting issues
such that the ROS toolset (like rviz, rqt_) could run. 


